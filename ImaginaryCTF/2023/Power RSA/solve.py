from math import sqrt
from Crypto.Util.number import long_to_bytes
n = 273678428062491065338745264687326646872489279881155178980082318061073791653139699128470298617369463093224254738902197374180922523694941674425741767173191390740386536299022952621480511602118357134802709523266238677944337941496192434557775075049053960934430194726430607923286003856274807348390651744718775639406168586309002620410201830440965116576445272059743038987580136672466066669007445400795526827576226056107680765832569964693344210601257836701940934786578709821182739106998978361215372152694166138824283793543467406811109582792535865117580859323287429265464133372460834362006855405094123429461949858621836889455006316250472723379505761269989335117093488692636714079092992676320606270795935257730854704421487980469493367566088684614265756857644835461087541395574003253003599689833721213694742692875582139539219941362948738015500060574167771555377548645198674955235483327460119077454776617294421151354363822453490354339669780899878191242851123335694622064929441627923055591296575898128097174846785779801999360610034929490894650901713056501513552986417003317825539471330189290814388790516509980417858214859394121563124024009149463727461042426372783824745887337717187142123896510809059775581959426062478078257758226165919105350379937
e = 65537
c = 225416370180062917749125858742025704702508977171034146310509761163821367897368015740614081608509619671422841556676301930345657974221136413434191530106586167446462816247036695058560967845646873323214484709355387499511724529386626442149700589117221617106532415142697246407978022386295178838827847793731107809552864450524461136022267363244211086029840086267107418227900752995525384647406441940506011787330954340176541642022699879035416947506132891567621201187280121791371580943743739469682352468114342847415752018692130905333079652937421055058203988138344212290310259230070704333255669285004151179973542413542458669567199865625770022570366892785209279267334402372479850148835303556957442363619674144620069983182568940347660120687009429514643005725026027369693695985389340531308456540591138775073031925717238578061393706303206899895973256390209652596322083423669503340979942976899751040674340577924489851671862565311686544221937807331274019383858675009790303988725157012614599790149437850538772929998768439840554428019634077943936318560681625950236604751080195690390428822387285006183397302888431548112284146718935275208613739161889215832272677836208228203744952569461346343815235033047054899433866646690170731073295646621407285743897950

"""
resources: https://einspem.upm.edu.my/journal/fullpaper/vol13saugust/8.pdf
In our case r_p = r_q = 1, m = 2 so we only need 3 times to find p and q. I tried some i and i=1 gave me p and q

Sagemath:
#!/bin/usr/env sage
n = 273678428062491065338745264687326646872489279881155178980082318061073791653139699128470298617369463093224254738902197374180922523694941674425741767173191390740386536299022952621480511602118357134802709523266238677944337941496192434557775075049053960934430194726430607923286003856274807348390651744718775639406168586309002620410201830440965116576445272059743038987580136672466066669007445400795526827576226056107680765832569964693344210601257836701940934786578709821182739106998978361215372152694166138824283793543467406811109582792535865117580859323287429265464133372460834362006855405094123429461949858621836889455006316250472723379505761269989335117093488692636714079092992676320606270795935257730854704421487980469493367566088684614265756857644835461087541395574003253003599689833721213694742692875582139539219941362948738015500060574167771555377548645198674955235483327460119077454776617294421151354363822453490354339669780899878191242851123335694622064929441627923055591296575898128097174846785779801999360610034929490894650901713056501513552986417003317825539471330189290814388790516509980417858214859394121563124024009149463727461042426372783824745887337717187142123896510809059775581959426062478078257758226165919105350379937.0
e = 65537
c = 225416370180062917749125858742025704702508977171034146310509761163821367897368015740614081608509619671422841556676301930345657974221136413434191530106586167446462816247036695058560967845646873323214484709355387499511724529386626442149700589117221617106532415142697246407978022386295178838827847793731107809552864450524461136022267363244211086029840086267107418227900752995525384647406441940506011787330954340176541642022699879035416947506132891567621201187280121791371580943743739469682352468114342847415752018692130905333079652937421055058203988138344212290310259230070704333255669285004151179973542413542458669567199865625770022570366892785209279267334402372479850148835303556957442363619674144620069983182568940347660120687009429514643005725026027369693695985389340531308456540591138775073031925717238578061393706303206899895973256390209652596322083423669503340979942976899751040674340577924489851671862565311686544221937807331274019383858675009790303988725157012614599790149437850538772929998768439840554428019634077943936318560681625950236604751080195690390428822387285006183397302888431548112284146718935275208613739161889215832272677836208228203744952569461346343815235033047054899433866646690170731073295646621407285743897950

i = 1
x = PolynomialRing(RationalField(), 'x').gen()

ro = (floor(sqrt(n)) - 1) * (floor(sqrt(n)) - 1)
z = (n - 1) % ro
f = x^2 - z * x + ro
roots = f.roots()

x1 = int(n / (roots[0][0] + 1))
x2 = int(n / (roots[1][0] + 1))
print(x1) #p
print(x2) #q
"""

p = 17339015770402205788235859449536453755386165034535518763374882801458864846389090207097184369452039547213344100272811962478251289559781396479460582711722678464417025118077251150219579908034957322948144671158578979149272762649624622624058677171879243670001287393532792315557241848405762110112604472775529748492194001371784546261553601927726736564091702819345914451021907011025987812577444295054800623458133807221825991415363743601606542451189870694460643540714654512714507652949109189273096305807711119425319255896827020354936858131955566670853945280861310929338519868094163407056566926169621500263898236720718029984401
q = 15783965577196234537035742076159697304146913212723331998777162964962627910161181225727290805253269030842898418065321498532046405096151205459793308919615927294432259042980922616571763940984728689526465284150012328670017291284314167973885852254575280708873970256644285715972694652601120223567296752385722939105770993617762792259180093682893056591721675083981052863878089711473079641117339960541188316592774306605780785996636946164371087688903079833833601345490948780323603722991495935666760479817482724696789173739938442466092036851636645902327051584267037384404960630511066139917885209505756271174151381738217627717137

assert p*q == n

phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
flag = pow(c, d, n)
print(long_to_bytes(flag))
